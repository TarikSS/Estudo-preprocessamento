# -*- coding: utf-8 -*-
"""treino_preprocessamento.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MQT_fgY6-DqNg3qGuusgAuB-LHCnaMwQ
"""

import pandas as pd

dados = pd.read_csv("/content/sample_data/exames.csv")
dados.head()

exames = dados.drop(["id", "diagnostico"], axis =1)
diagnostico = dados.diagnostico
exames.head()
diagnostico.head()

exames.isnull().sum()

exames = exames.drop(["exame_33"], axis= 1)

import seaborn as sns
import matplotlib.pyplot as plt
matriz_correlacao = exames.corr()
plt.figure(figsize=(12, 10))
correlacao = sns.heatmap(matriz_correlacao, fmt=".1f", annot = True)

matriz_correlacao = matriz_correlacao[matriz_correlacao>0.99]

matriz_correlacao_v2 = matriz_correlacao.sum()
matriz_correlacao_v2

variaveis_correlacionadas = matriz_correlacao_v2[matriz_correlacao_v2>1]
variaveis_correlacionadas

exames.head()

dados_v2 = pd.concat([diagnostico, exames], axis=1)
dados_v2.head()

dados_plot = pd.melt(dados_v2, id_vars = "diagnostico", var_name="exames", value_name="resultados")
dados_plot

plt.figure(figsize=(20,10))
sns.violinplot(data = dados_plot, x="exames", y="resultados", hue="diagnostico", split=True)
plt.xticks(rotation=90)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
resultado_exames_normalizado = scaler.fit_transform(exames)
resultado_exames_normalizado

dados_plot_v2 = pd.DataFrame(data=resultado_exames_normalizado, columns=exames.keys())

dados_plot_v2

dados_plot_normalizado = pd.concat([diagnostico, dados_plot_v2], axis=1)

dados_plot_normalizado

dados_plot_normalizado = pd.melt(dados_plot_normalizado, id_vars="diagnostico", var_name="exames", value_name="resultado")
dados_plot_normalizado

plt.figure(figsize=(15,15))
plt.xticks(rotation=90)
sns.violinplot(data=dados_plot_normalizado, x="exames", y="resultado", hue="diagnostico", split=True)

from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from sklearn.model_selection import train_test_split
selecionador_feature = SelectKBest(chi2, k=5)
treino_x, treino_y, teste_x, teste_y = train_test_split(exames, diagnostico, test_size=0.25, stratify=diagnostico)
selecionador_feature.fit(treino_x, treino_y)

